{"ts": "2025-08-08T22:55:24.594988+00:00", "kind": "run_started", "data": {"run_id": "20250808_225524", "goal": "write: master_ai/runtime/net.py --- from __future__ import annotations\nfrom pathlib import Path\nimport time, requests\n\n# Optional event logging: if runtime.events.log isn't available, no-op.\ntry:\n    from .events import log as _emit\nexcept Exception:  # pragma: no cover\n    def _emit(*_a, **_k):  # noqa: D401 - tiny shim\n        pass\n\nUA = \"MasterAI/0.1 (+https://example.invalid)\"\n\ndef _get(url: str, *, stream: bool = False, timeout: int = 30) -> requests.Response:\n    return requests.get(url, headers={\"User-Agent\": UA}, stream=stream, timeout=timeout)\n\ndef fetch_file(url: str, dest: Path, retries: int = 3, backoff: float = 0.6, timeout: int = 30) -> Path:\n    \"\"\"Download URL to dest with simple retry + backoff.\"\"\"\n    dest = Path(dest)\n    dest.parent.mkdir(parents=True, exist_ok=True)\n    last_err: Exception | None = None\n    for i in range(1, retries + 1):\n        try:\n            _emit(\"log\", {\"step\": 1, \"line\": f\"download try {i}/{retries}: {url}\"})\n            with _get(url, stream=True, timeout=timeout) as r:\n                r.raise_for_status()\n                with dest.open(\"wb\") as f:\n                    for chunk in r.iter_content(8192):\n                        if chunk:\n                            f.write(chunk)\n            _emit(\"log\", {\"step\": 1, \"line\": f\"saved -> {dest}\"})\n            return dest\n        except Exception as e:  # noqa: BLE001\n            last_err = e\n            _emit(\"log\", {\"step\": 1, \"line\": f\"download error: {e}\"})\n            if i < retries:\n                time.sleep(backoff * i)\n    raise RuntimeError(f\"failed to fetch {url}: {last_err}\")\n\ndef fetch_text(url: str, timeout: int = 30) -> str:\n    r = _get(url, stream=False, timeout=timeout)\n    r.raise_for_status()\n    return r.text\n", "safe": true}}
{"ts": "2025-08-08T22:55:24.595182+00:00", "kind": "plan_ready", "data": {"steps": [{"op": "write", "desc": "write file: master_ai/runtime/net.py", "cmd": null, "path": "master_ai/runtime/net.py", "content": "from __future__ import annotations\nfrom pathlib import Path\nimport time, requests\n\n# Optional event logging: if runtime.events.log isn't available, no-op.\ntry:\n    from .events import log as _emit\nexcept Exception:  # pragma: no cover\n    def _emit(*_a, **_k):  # noqa: D401 - tiny shim\n        pass\n\nUA = \"MasterAI/0.1 (+https://example.invalid)\"\n\ndef _get(url: str, *, stream: bool = False, timeout: int = 30) -> requests.Response:\n    return requests.get(url, headers={\"User-Agent\": UA}, stream=stream, timeout=timeout)\n\ndef fetch_file(url: str, dest: Path, retries: int = 3, backoff: float = 0.6, timeout: int = 30) -> Path:\n    \"\"\"Download URL to dest with simple retry + backoff.\"\"\"\n    dest = Path(dest)\n    dest.parent.mkdir(parents=True, exist_ok=True)\n    last_err: Exception | None = None\n    for i in range(1, retries + 1):\n        try:\n            _emit(\"log\", {\"step\": 1, \"line\": f\"download try {i}/{retries}: {url}\"})\n            with _get(url, stream=True, timeout=timeout) as r:\n                r.raise_for_status()\n                with dest.open(\"wb\") as f:\n                    for chunk in r.iter_content(8192):\n                        if chunk:\n                            f.write(chunk)\n            _emit(\"log\", {\"step\": 1, \"line\": f\"saved -> {dest}\"})\n            return dest\n        except Exception as e:  # noqa: BLE001\n            last_err = e\n            _emit(\"log\", {\"step\": 1, \"line\": f\"download error: {e}\"})\n            if i < retries:\n                time.sleep(backoff * i)\n    raise RuntimeError(f\"failed to fetch {url}: {last_err}\")\n\ndef fetch_text(url: str, timeout: int = 30) -> str:\n    r = _get(url, stream=False, timeout=timeout)\n    r.raise_for_status()\n    return r.text", "before": null, "after": null, "code": null, "edits": null, "layout": null}]}}
{"ts": "2025-08-08T22:55:24.595428+00:00", "kind": "progress", "data": {"current": 0, "total": 1, "eta": null}}
{"ts": "2025-08-08T22:55:24.596426+00:00", "kind": "thought", "data": {"text": "Step 1/1: write file: master_ai/runtime/net.py"}}
{"ts": "2025-08-08T22:55:24.598028+00:00", "kind": "diff", "data": {"step": 1, "path": "master_ai/runtime/net.py", "patch": "--- artifacts/runs/20250808_225524/master_ai/runtime/net.py (old)+++ artifacts/runs/20250808_225524/master_ai/runtime/net.py (new)@@ -0,0 +1,43 @@+from __future__ import annotations\n+from pathlib import Path\n+import time, requests\n+\n+# Optional event logging: if runtime.events.log isn't available, no-op.\n+try:\n+    from .events import log as _emit\n+except Exception:  # pragma: no cover\n+    def _emit(*_a, **_k):  # noqa: D401 - tiny shim\n+        pass\n+\n+UA = \"MasterAI/0.1 (+https://example.invalid)\"\n+\n+def _get(url: str, *, stream: bool = False, timeout: int = 30) -> requests.Response:\n+    return requests.get(url, headers={\"User-Agent\": UA}, stream=stream, timeout=timeout)\n+\n+def fetch_file(url: str, dest: Path, retries: int = 3, backoff: float = 0.6, timeout: int = 30) -> Path:\n+    \"\"\"Download URL to dest with simple retry + backoff.\"\"\"\n+    dest = Path(dest)\n+    dest.parent.mkdir(parents=True, exist_ok=True)\n+    last_err: Exception | None = None\n+    for i in range(1, retries + 1):\n+        try:\n+            _emit(\"log\", {\"step\": 1, \"line\": f\"download try {i}/{retries}: {url}\"})\n+            with _get(url, stream=True, timeout=timeout) as r:\n+                r.raise_for_status()\n+                with dest.open(\"wb\") as f:\n+                    for chunk in r.iter_content(8192):\n+                        if chunk:\n+                            f.write(chunk)\n+            _emit(\"log\", {\"step\": 1, \"line\": f\"saved -> {dest}\"})\n+            return dest\n+        except Exception as e:  # noqa: BLE001\n+            last_err = e\n+            _emit(\"log\", {\"step\": 1, \"line\": f\"download error: {e}\"})\n+            if i < retries:\n+                time.sleep(backoff * i)\n+    raise RuntimeError(f\"failed to fetch {url}: {last_err}\")\n+\n+def fetch_text(url: str, timeout: int = 30) -> str:\n+    r = _get(url, stream=False, timeout=timeout)\n+    r.raise_for_status()\n+    return r.text"}}
{"ts": "2025-08-08T22:55:24.598556+00:00", "kind": "log", "data": {"step": 1, "line": "Wrote master_ai/runtime/net.py (1713 bytes)"}}
{"ts": "2025-08-08T22:55:24.599768+00:00", "kind": "action_done", "data": {"step": 1, "rc": 0, "seconds": 0.003, "log": null}}
{"ts": "2025-08-08T22:55:24.600745+00:00", "kind": "progress", "data": {"current": 1, "total": 1, "eta": null}}
{"ts": "2025-08-08T22:55:24.601897+00:00", "kind": "run_finished", "data": {"result": "OK"}}
